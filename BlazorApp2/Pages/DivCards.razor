@page "/divcards"
@using BlazorApp2.Data.Models;
@using System.Text.Json;
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration
<h3>Divination Cards</h3>

<button @onclick="GetDivCards" class="btn-primary btn">Update Cards</button>
<table class="table ">
    <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Cards Owned
            </th>
            <th>
                Max Stack
            </th>
            <th>
                Text
            </th>
            <th>
                Reward
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (DivinationCard card in divCardList)
        {
            <tr>
                <td>@card.baseType</td>
                <td style="background-color: @(card.stackSize >= card.maxStackSize ? "#6aa84f" : "#cc0000")">@card.stackSize</td>
                <td style="background-color: @(card.stackSize >= card.maxStackSize ? "#6aa84f" : "#cc0000")">@card.maxStackSize</td>
                <td>@card.cardText</td>
                <td>@card.rewardText</td>
            </tr>
        }
    </tbody>
</table>
@code {

    List<DivinationCard> divCardList = new List<DivinationCard>();

    protected override async Task OnInitializedAsync()
    {

        var request = new HttpRequestMessage(HttpMethod.Get, "https://blazorapi20230112152353.azurewebsites.net/api/DivinationCards");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        var cards = await response.Content.ReadFromJsonAsync<List<DivinationCard>>();
        divCardList = cards;
    }

    protected async Task GetDivCards()
    {

        var request = new HttpRequestMessage(HttpMethod.Get, Configuration.GetSection("PoeStashEndpoint").Value);

        var client = ClientFactory.CreateClient();

        client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Configuration.GetSection("PoEStashKey:ApiKey").Value);

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var tst = ClientFactory.CreateClient();

            var stash = await response.Content.ReadFromJsonAsync<Root>();

            List<Item> divCards = stash.stash.items;

            // Clean up the text and use one prop
            foreach (var item in divCards)
            {
                if (item.flavourText != null)
                {
                    foreach (var txt in item.flavourText)
                    {
                        item.cardText += txt + " ";
                    }
                }
                else
                {
                    item.cardText = " ";
                }

                item.cardText = item.cardText.Replace("<size:23>", "").Replace("<size:24>", "").Replace("<size:25>", "").Replace("<size:26>", "").Replace("<size:27>", "").Replace("<size:28>", "").Replace("<size:29>", "")
                .Replace("<size:30>", "").Replace("<size:31>", "").Replace("<size:32>", "").Replace("<size:33>", "").Replace("<size:34>", "")
                .Replace("{", "").Replace("}", "").Replace("<smaller>", "");

            }

            // Clean up the reward text

            foreach (var item in divCards)
            {
                if (item.explicitMods != null)
                {
                    foreach (var mod in item.explicitMods)
                    {
                        item.rewardText += mod + " ";
                    }
                }

            }

            var req = new HttpRequestMessage(HttpMethod.Post, $"{Configuration.GetSection("MyApiEndpoint").Value}/DivinationCards");

            req.Content = new StringContent(JsonSerializer.Serialize(divCards), System.Text.Encoding.UTF8, "application/json");

            var rsp = await tst.SendAsync(req);

        }

        await OnInitializedAsync();

        StateHasChanged();

    }

}

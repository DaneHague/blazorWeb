@page "/currency"
@using BlazorApp2.Data.Models;
@using System.Text.Json;
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration
@inherits CurrencyContainer

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts

<h3>Currency</h3>

<button class="btn btn-primary" onclick="@getCurrency">Update Currency</button>

    <SfChart>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
        <ChartSeriesCollection>
        <ChartSeries DataSource="@currChart" XName="baseType" YName="stackSize" Type="ChartSeriesType.Column">
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>

<table class="table table-bordered" style="padding-top: 10px">
    <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Owned
            </th>
            <th>
                Text
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (CurrencyItem curr in currencyList)
        {
            <tr>
                <td>@curr.baseType</td>
                <td>@curr.stackSize</td>
                <td>@curr.cardText</td>
            </tr>
        }
    </tbody>
</table>

<CurrencyContainer currName="Passed param" currStackSize="" currMaxStackSize="">

</CurrencyContainer>


@code {

    protected async Task getCurrency()
    {

        var request = new HttpRequestMessage(HttpMethod.Get, Configuration.GetSection("PoeCurrencyEndPoint").Value);
        var client = ClientFactory.CreateClient();
        client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Configuration.GetSection("PoEStashKey:ApiKey").Value);
        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var tst = ClientFactory.CreateClient();
            var stash = await response.Content.ReadFromJsonAsync<CurrencyRoot>();
            List<CurrencyItem> currency = stash.stash.items;
            foreach (var item in currency)
            {
                if (item.explicitMods != null)
                {
                    foreach (var mod in item.explicitMods)
                    {
                        item.cardText = item.explicitMods[0];
                    }
                } else
                {
                    // So we don't send null
                    item.cardText = "";
                }

                item.artFilename = "";
                item.rewardText = "";
            }

            var req = new HttpRequestMessage(HttpMethod.Post, $"{Configuration.GetSection("MyApiEndpoint").Value}/Currencies");

            req.Content = new StringContent(JsonSerializer.Serialize(currency), System.Text.Encoding.UTF8, "application/json");
            var rsp = await tst.SendAsync(req);

            await OnInitializedAsync();

            StateHasChanged();
        }

    }

    List<CurrencyItem> currencyList = new List<CurrencyItem>();
    List<CurrencyItem> currChart = new List<CurrencyItem>();

    protected override async Task OnInitializedAsync()
    {

        var request = new HttpRequestMessage(HttpMethod.Get, "https://blazorapi20230112152353.azurewebsites.net/api/Currencies");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        var currency = await response.Content.ReadFromJsonAsync<List<CurrencyItem>>();
        currencyList = currency;

        

        foreach (var item in currencyList)
        {
            if (item.typeLine == "Divine Orb" || item.typeLine == "Chaos Orb")
            {
                currChart.Add(item);
            }
        }

        StateHasChanged();
    }
}
